const WebSocket = require('ws');

// –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
const TEST_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NzZlNTQ5N2YzN2UzODlmODAzYmVkYTYiLCJlbWFpbCI6InVzZXJAZ21haWwuY29tIiwiaWF0IjoxNzM1MzgxMTUyLCJleHAiOjE3MzU5ODU5NTJ9.TJ8FH83bLRiPTajdNX5rDhNE9hsjSjEKp5p_CvYLh08';

// –¢–µ—Å—Ç–æ–≤—ã–µ ID —á–∞—Ç–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
const CHAT_A_ID = '676e5510f37e389f803bed18';
const CHAT_B_ID = '676e5510f37e389f803bed19';

class ChatTester {
    constructor() {
        this.ws = null;
        this.subscribedChats = new Set();
        this.receivedMessages = [];
    }

    connect() {
        return new Promise((resolve, reject) => {
            console.log('üîå Connecting to WebSocket...');
            this.ws = new WebSocket('ws://localhost:3000/ws/chat');

            this.ws.on('open', () => {
                console.log('‚úÖ Connected to WebSocket');
                resolve();
            });

            this.ws.on('message', (data) => {
                try {
                    const message = JSON.parse(data.toString());
                    this.handleMessage(message);
                } catch (error) {
                    console.error('‚ùå Error parsing message:', error);
                }
            });

            this.ws.on('error', (error) => {
                console.error('‚ùå WebSocket error:', error);
                reject(error);
            });

            this.ws.on('close', () => {
                console.log('üîå WebSocket disconnected');
            });
        });
    }

    handleMessage(message) {
        console.log(`üì® Received: ${message.type}`, message.data);
        this.receivedMessages.push(message);

        switch (message.type) {
            case 'connected':
                console.log('‚úÖ Connection established');
                break;
            case 'authenticated':
                console.log(`‚úÖ Authenticated as user: ${message.data.userId}`);
                break;
            case 'chat_subscribed':
                this.subscribedChats.add(message.data.chatId);
                console.log(`‚úÖ Subscribed to chat: ${message.data.chatId}`);
                break;
            case 'chat_unsubscribed':
                this.subscribedChats.delete(message.data.chatId);
                console.log(`‚úÖ Unsubscribed from chat: ${message.data.chatId}`);
                break;
            case 'user_message':
                console.log(`üì§ User message in chat ${message.data.chatId}: ${message.data.content}`);
                break;
            case 'assistant_message_start':
                console.log(`ü§ñ Assistant started typing in chat: ${message.data.chatId}`);
                break;
            case 'assistant_message_token':
                process.stdout.write(message.data.token);
                break;
            case 'assistant_message_complete':
                console.log(`\n‚úÖ Assistant completed message in chat: ${message.data.chatId}`);
                break;
            case 'error':
                console.error(`‚ùå Server error: ${message.data.message}`);
                break;
        }
    }

    send(messageType, data) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            const message = { type: messageType, data };
            this.ws.send(JSON.stringify(message));
            console.log(`üì§ Sent: ${messageType}`, data);
        } else {
            console.error('‚ùå WebSocket not connected');
        }
    }

    subscribeToChat(chatId) {
        this.send('subscribe_chat', {
            token: TEST_TOKEN,
            chatId: chatId
        });
    }

    unsubscribeFromChat(chatId) {
        this.send('unsubscribe_chat', {
            chatId: chatId
        });
    }

    sendMessage(chatId, message) {
        this.send('message', {
            chatId: chatId,
            message: message
        });
    }

    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async runTest() {
        try {
            // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await this.connect();
            await this.sleep(1000);

            // 2. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —á–∞—Ç
            console.log('\nüü¶ === –¢–ï–°–¢ 1: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Chat A ===');
            this.subscribeToChat(CHAT_A_ID);
            await this.sleep(2000);

            // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–π —á–∞—Ç
            console.log('\nüü¶ === –¢–ï–°–¢ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Chat A ===');
            this.sendMessage(CHAT_A_ID, 'Hello from Chat A!');
            await this.sleep(5000);

            // 4. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π —á–∞—Ç (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø–µ—Ä–≤—ã–º)
            console.log('\nüü© === –¢–ï–°–¢ 3: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Chat B (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ) ===');
            this.subscribeToChat(CHAT_B_ID);
            await this.sleep(2000);

            // 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ç–æ—Ä–æ–π —á–∞—Ç
            console.log('\nüü© === –¢–ï–°–¢ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Chat B ===');
            this.sendMessage(CHAT_B_ID, 'Hello from Chat B!');
            await this.sleep(5000);

            // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ä–∞–∑–Ω—ã–µ —á–∞—Ç—ã –±—ã—Å—Ç—Ä–æ
            console.log('\nüîÑ === –¢–ï–°–¢ 5: –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ ===');
            this.sendMessage(CHAT_A_ID, 'Quick message to A');
            await this.sleep(500);
            this.sendMessage(CHAT_B_ID, 'Quick message to B');
            await this.sleep(500);
            this.sendMessage(CHAT_A_ID, 'Another message to A');
            await this.sleep(5000);

            // 7. –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞
            console.log('\nüî¥ === –¢–ï–°–¢ 6: –û—Ç–ø–∏—Å–∫–∞ –æ—Ç Chat A ===');
            this.unsubscribeFromChat(CHAT_A_ID);
            await this.sleep(1000);

            // 8. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–ø–∏—Å–∞–Ω–Ω—ã–π —á–∞—Ç
            console.log('\n‚ùå === –¢–ï–°–¢ 7: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Ç–ø–∏—Å–∞–Ω–Ω—ã–π —á–∞—Ç ===');
            this.sendMessage(CHAT_A_ID, 'This should fail');
            await this.sleep(2000);

            // 9. –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —á–∞—Ç–∞
            console.log('\nüî¥ === –¢–ï–°–¢ 8: –û—Ç–ø–∏—Å–∫–∞ –æ—Ç Chat B ===');
            this.unsubscribeFromChat(CHAT_B_ID);
            await this.sleep(1000);

            console.log('\n‚úÖ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
            console.log(`üìä –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: ${Array.from(this.subscribedChats).join(', ')}`);
            console.log(`üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: ${this.receivedMessages.length}`);

            this.ws.close();

        } catch (error) {
            console.error('‚ùå Test failed:', error);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const tester = new ChatTester();
tester.runTest(); 