const WebSocket = require("ws");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
  serverUrl: "ws://localhost:3000/ws/chat",
  totalUsers: 10000, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  connectionsPerUser: 2, // —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  messagesPerConnection: 2, //  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
  messageInterval: 4000, //  –∏–Ω—Ç–µ—Ä–≤–∞–ª
  testToken:
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODJkYmJlMTYyNjkxYjhhYmZlNzVlYzEiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDg1MTYyMTksImV4cCI6MTc1MDI0NDIxOX0.R5_Ifd3uP9ykQNjQozCaBddOVal0mTYghneVPLWp4IQ",
  debug: false, //  –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
};

class LoadTester {
  constructor(config) {
    this.config = config;
    this.connections = [];
    this.authenticatedConnections = 0;
    this.chatsCreated = 0;
    this.stats = {
      totalConnections: 0,
      successfulConnections: 0,
      failedConnections: 0,
      messagesSent: 0,
      messagesReceived: 0,
      errors: 0,
      authErrors: 0,
      rateLimitErrors: 0,
      startTime: null,
      endTime: null,
    };
  }

  async runTest() {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–µ—Ä–≤–µ—Ä–∞");
    console.log(`üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.config.totalUsers}
    - –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${this.config.connectionsPerUser}
    - –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${this.config.messagesPerConnection}
    - –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: ${this.config.messageInterval}–º—Å
    `);

    this.stats.startTime = Date.now();

    // —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (let userId = 1; userId <= this.config.totalUsers; userId++) {
      await this.createUserConnections(userId);

      // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      await this.sleep(100); // –∑–∞–¥–µ—Ä–∂–∫–∞
    }

    console.log(
      `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${this.stats.successfulConnections} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–∑ ${this.stats.totalConnections} –ø–æ–ø—ã—Ç–æ–∫`
    );
    console.log(
      `üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${this.authenticatedConnections}`
    );
    console.log(`üí¨ –°–æ–∑–¥–∞–Ω–æ —á–∞—Ç–æ–≤: ${this.chatsCreated}`);

    // –ñ–¥–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log("‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...");
    await this.sleep(5000);

    // –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–æ–≤
    console.log("‚è≥ –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–æ–≤...");
    await this.sleep(3000);

    // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    await this.startMessaging();

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await this.sleep(
      this.config.messagesPerConnection * this.config.messageInterval + 10000
    );

    this.stats.endTime = Date.now();
    this.printResults();
    this.cleanup();
  }

  async createUserConnections(userId) {
    const chatTypes = ["messages", "documents"];

    for (let i = 0; i < this.config.connectionsPerUser; i++) {
      const chatType = chatTypes[i % chatTypes.length];
      await this.createConnection(userId, chatType, i);
    }
  }

  createConnection(userId, chatType, connectionIndex) {
    return new Promise((resolve) => {
      const ws = new WebSocket(this.config.serverUrl);
      const connectionId = `user${userId}_${chatType}_${connectionIndex}`;

      this.stats.totalConnections++;

      let isAuthenticated = false;
      let hasJoinedChat = false;

      ws.on("open", () => {
        if (this.config.debug) {
          console.log(`üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${connectionId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
        }
        this.stats.successfulConnections++;

        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        ws.send(
          JSON.stringify({
            type: "join_chat",
            data: {
              token: this.config.testToken,
              chatType: chatType,
            },
          })
        );

        this.connections.push({
          ws,
          userId,
          chatType,
          connectionId,
          messagesSent: 0,
          isAuthenticated: false,
          hasJoinedChat: false,
        });

        resolve();
      });

      ws.on("message", (data) => {
        try {
          const message = JSON.parse(data.toString());
          this.stats.messagesReceived++;

          if (this.config.debug) {
            console.log(`üì® ${connectionId} –ø–æ–ª—É—á–∏–ª:`, message.type);
          }

          // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          if (message.type === "authenticated") {
            isAuthenticated = true;
            this.authenticatedConnections++;
            const connection = this.connections.find(
              (c) => c.connectionId === connectionId
            );
            if (connection) {
              connection.isAuthenticated = true;

              // –ü–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç
              if (this.config.debug) {
                console.log(
                  `üîê ${connectionId}: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º —á–∞—Ç`
                );
              }

              ws.send(
                JSON.stringify({
                  type: "create_chat",
                  data: {
                    chatType: chatType,
                  },
                })
              );
            }
          }

          if (
            message.type === "chat_joined" ||
            message.type === "chat_created"
          ) {
            hasJoinedChat = true;
            this.chatsCreated++;
            const connection = this.connections.find(
              (c) => c.connectionId === connectionId
            );
            if (connection) {
              connection.hasJoinedChat = true;

              if (this.config.debug) {
                console.log(`üí¨ ${connectionId}: –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`);
              }
            }
          }

          if (message.type === "error") {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${connectionId}:`, message.data.message);
            this.stats.errors++;

            if (
              message.data.message.includes("Authentication") ||
              message.data.message.includes("token")
            ) {
              this.stats.authErrors++;
            }

            if (message.data.message.includes("Rate limit")) {
              this.stats.rateLimitErrors++;
            }
          }
        } catch (error) {
          console.error(
            `‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${connectionId}:`,
            error
          );
          this.stats.errors++;
        }
      });

      ws.on("error", (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ${connectionId}:`, error.message);
        this.stats.failedConnections++;
        this.stats.errors++;
        resolve();
      });

      ws.on("close", () => {
        if (this.config.debug) {
          console.log(`üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${connectionId} –∑–∞–∫—Ä—ã—Ç–æ`);
        }
      });

      // –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      setTimeout(() => {
        if (ws.readyState === WebSocket.CONNECTING) {
          console.error(`‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ${connectionId}`);
          this.stats.failedConnections++;
          ws.terminate();
          resolve();
        }
      }, 15000); // –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç
    });
  }

  async startMessaging() {
    console.log("üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...");

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const readyConnections = this.connections.filter(
      (connection) =>
        connection.ws.readyState === WebSocket.OPEN &&
        (connection.isAuthenticated || connection.hasJoinedChat)
    );

    console.log(
      `üìä –ì–æ—Ç–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${readyConnections.length} –∏–∑ ${this.connections.length}`
    );

    if (readyConnections.length === 0) {
      console.error("‚ùå –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π!");
      return;
    }

    const messagingPromises = readyConnections.map(async (connection) => {
      for (let i = 0; i < this.config.messagesPerConnection; i++) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        await this.sleep(Math.random() * this.config.messageInterval + 1000);

        if (connection.ws.readyState === WebSocket.OPEN) {
          const testMessage = this.generateTestMessage(connection.chatType, i);

          if (this.config.debug) {
            console.log(
              `üì§ ${connection.connectionId}: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "${testMessage}"`
            );
          }

          connection.ws.send(
            JSON.stringify({
              type: "message",
              data: {
                message: testMessage,
              },
            })
          );

          connection.messagesSent++;
          this.stats.messagesSent++;

          console.log(
            `üì® ${connection.connectionId}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${i + 1}/${
              this.config.messagesPerConnection
            }`
          );
        } else {
          console.warn(
            `‚ö†Ô∏è ${connection.connectionId}: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏`
          );
        }
      }
    });

    await Promise.all(messagingPromises);
  }

  generateTestMessage(chatType, messageIndex) {
    const documentMessages = [
      "–ü–æ–º–æ–≥–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã",
      "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑—ã?",
      "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è",
    ];

    const generalMessages = [
      "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞?",
      "–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞?",
      "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —Ç—Ä—É–¥–æ–≤—ã—Ö –ø—Ä–∞–≤?",
    ];

    const messages =
      chatType === "documents" ? documentMessages : generalMessages;
    return messages[messageIndex % messages.length];
  }

  printResults() {
    const duration = (this.stats.endTime - this.stats.startTime) / 1000;
    const successRate = (
      (this.stats.successfulConnections / this.stats.totalConnections) *
      100
    ).toFixed(2);
    const messagesPerSecond = (this.stats.messagesSent / duration).toFixed(2);
    const expectedMessages =
      this.config.totalUsers *
      this.config.connectionsPerUser *
      this.config.messagesPerConnection;

    console.log("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø");
    console.log("=".repeat(60));
    console.log(`‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: ${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    console.log(`üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è:`);
    console.log(`   - –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${this.stats.totalConnections}`);
    console.log(`   - –£—Å–ø–µ—à–Ω—ã—Ö: ${this.stats.successfulConnections}`);
    console.log(`   - –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${this.stats.failedConnections}`);
    console.log(`   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
    console.log(`   - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${this.authenticatedConnections}`);
    console.log(`   - –°–æ–∑–¥–∞–Ω–æ —á–∞—Ç–æ–≤: ${this.chatsCreated}`);
    console.log(`üì§ –°–æ–æ–±—â–µ–Ω–∏—è:`);
    console.log(`   - –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedMessages}`);
    console.log(`   - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${this.stats.messagesSent}`);
    console.log(`   - –ü–æ–ª—É—á–µ–Ω–æ: ${this.stats.messagesReceived}`);
    console.log(`   - –°–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫: ${messagesPerSecond}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏:`);
    console.log(`   - –í—Å–µ–≥–æ: ${this.stats.errors}`);
    console.log(`   - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${this.stats.authErrors}`);
    console.log(`   - Rate limiting: ${this.stats.rateLimitErrors}`);
    console.log("=".repeat(60));

    if (successRate < 95) {
      console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π!");
    }

    if (this.stats.messagesSent < expectedMessages * 0.8) {
      console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å!");
    }

    if (this.stats.errors > this.stats.messagesSent * 0.05) {
      console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫!");
    }

    if (
      successRate >= 95 &&
      this.stats.errors <= this.stats.messagesSent * 0.05 &&
      this.stats.messagesSent >= expectedMessages * 0.8
    ) {
      console.log("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!");
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
    if (this.stats.authErrors > 0) {
      console.log("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞");
    }
    if (this.stats.rateLimitErrors > 0) {
      console.log(
        "- –£–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ rate limiting"
      );
    }
    if (this.authenticatedConnections < this.stats.successfulConnections) {
      console.log("- –ù–µ –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ—à–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é");
    }
  }

  cleanup() {
    console.log("üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
    this.connections.forEach((connection) => {
      if (connection.ws.readyState === WebSocket.OPEN) {
        connection.ws.close();
      }
    });
  }

  sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new LoadTester(CONFIG);

  try {
    await tester.runTest();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
  }

  process.exit(0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on("SIGINT", () => {
  console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç...");
  process.exit(0);
});

if (require.main === module) {
  main();
}

module.exports = LoadTester;
