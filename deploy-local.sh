#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è LEX Server —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${GREEN}üóÑÔ∏è LEX Server with Local Database${NC}"
echo -e "${GREEN}=================================${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker is not installed${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose is not installed${NC}"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if [ ! -f .env ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  .env file not found. Creating from .env.example...${NC}"
    if [ -f .env.example ]; then
        cp .env.example .env
        echo -e "${YELLOW}üìù Please edit .env file with your actual values${NC}"
        echo -e "${YELLOW}Note: MONGO_USERNAME and MONGO_PASSWORD not needed for local DB${NC}"
        exit 1
    else
        echo -e "${RED}‚ùå .env.example file not found${NC}"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo -e "${BLUE}üìÇ Checking local database...${NC}"
if [ ! -d "./dataBase" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  dataBase directory not found, creating...${NC}"
    mkdir -p dataBase
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ dataBase
if [ ! -w "./dataBase" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Fixing permissions for dataBase directory...${NC}"
    chmod 755 ./dataBase
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p logs

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "${YELLOW}üì¶ Stopping existing containers...${NC}"
docker-compose down

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
echo -e "${BLUE}üóÑÔ∏è Database Information:${NC}"
echo -e "${GREEN}  ‚Ä¢ Type: Local MongoDB${NC}"
echo -e "${GREEN}  ‚Ä¢ Path: ./dataBase${NC}"
echo -e "${GREEN}  ‚Ä¢ Connection: mongodb://mongodb:27017/lex-ai${NC}"
echo -e "${GREEN}  ‚Ä¢ No authentication required${NC}"

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
echo -e "${YELLOW}üî® Building and starting containers with local database...${NC}"
docker-compose up -d --build

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
echo -e "${YELLOW}‚è≥ Waiting for services to start...${NC}"
sleep 15

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo -e "${YELLOW}üîç Checking container status...${NC}"
if docker-compose ps | grep -q "Up"; then
    echo -e "${GREEN}‚úÖ Deployment successful!${NC}"
    echo ""
    echo -e "${GREEN}üåê Application URLs:${NC}"
    echo -e "${GREEN}  ‚Ä¢ Server: http://localhost:3000${NC}"
    echo -e "${GREEN}  ‚Ä¢ Health: http://localhost:3000/health${NC}"
    echo -e "${GREEN}  ‚Ä¢ WebSocket: ws://localhost:3000/ws/chat${NC}"
    echo ""
    echo -e "${GREEN}üóÑÔ∏è Database Access:${NC}"
    echo -e "${GREEN}  ‚Ä¢ Local path: $(pwd)/dataBase${NC}"
    echo -e "${GREEN}  ‚Ä¢ Docker access: docker-compose exec mongodb mongosh lex-ai${NC}"
    echo -e "${GREEN}  ‚Ä¢ External access: mongosh mongodb://localhost:27017/lex-ai${NC}"
    echo ""
    echo -e "${BLUE}üìä Container Status:${NC}"
    docker-compose ps
else
    echo -e "${RED}‚ùå Deployment failed!${NC}"
    echo -e "${YELLOW}üìã Container logs:${NC}"
    docker-compose logs
    exit 1
fi 